I think it would be useful to have lots of button classes. This approach has 
several strengths, including the reduction of code smells, having each class
focus on doing one thing (which is to generate an action once they have been
pressed), and making the code in the PhotoRenamer class smaller. PhotoRenamer 
is a large application. In cases such as this, breaking requirements down into 
separate classes and/or methods is a useful approach. In PhotoRenamer, if a 
button needs to be added to a panel, all we would have to do is create a new 
instance of a particular existing button class and add it to a JPanel object. 
Since each instance would have their own copies of the overridden method 
actionPerformed, the need to do extra work in PhotoRenamer (i.e. create new 
JButton objects and call addActionListener() on them each time to add an 
ActionListener, taking up a number of lines) is gone. Once we run the program, 
the button will work the way it should be. As a result, the code becomes much 
cleaner and PhotoRenamer will only have to focus on creating and showing a 
directory explorer, as stated in the Javadoc. Based on 
this information, I think it is a wise choice to have each button class declared 
in a separate file.

However, there could be another approach. An alternative approach to having 
multiple button classes is to create another class that consists of instance 
(or static) methods that return a JButton (ex: ButtonCreator). In each method, 
we could add ActionListeners that are suited for each button by calling 
addActionListener. Then we could call those methods in PhotoRenamer in order to 
help create any JButtons that we need by pointing a JButton object to a certain 
method call. After creating the JButtons using the methods from the button 
class, we could then add them to a JPanel as per usual.





